#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<Windows.h>
#include<graphics.h>
#include<stack>
using namespace std;
int guaqia=0;
int gua[10]={4,3,4,5,2,5,5,5,5};
int wid[10]={8,9,7,8,9,11,8,7,9,7},heg[10]={8,9,10,6,8,13,10,10,11,8};
int map[20][20];
 stack<int(*)[20]> sa;
int Map[60][20][20]=            ////墙为1 空地为0 箱子为4 人5 目的是3
{
	{//0
		{9,9,1,1,1,9,9,9},
		{9,9,1,3,1,9,9,9},
		{9,9,1,0,1,1,1,1},
		{1,1,1,4,0,4,3,1},
		{1,3,0,4,5,1,1,1},
		{1,1,1,1,4,1,9,9},
		{9,9,9,1,3,1,9,9},
		{9,9,9,1,1,1,9,9}
	},
	{//1
		{1,1,1,1,1,9,9,9,9},
		{1,0,0,0,1,9,9,9,9},
		{1,0,4,0,1,9,1,1,1},
		{1,0,4,5,1,9,1,3,1},
		{1,1,1,4,1,1,1,3,1},
		{9,1,1,0,0,0,0,3,1},
		{9,1,0,0,0,1,0,0,1},
		{9,1,0,0,0,1,1,1,1},
		{9,1,1,1,1,1,9,9,9}
	},
	{//2
		{9,1,1,1,1,1,1,1,9,9},
		{9,1,0,0,0,0,0,1,1,1},
		{1,1,4,1,1,1,0,0,0,1},
		{1,0,0,5,4,0,0,4,0,1},
		{1,0,3,3,1,0,4,0,1,1},
		{1,1,3,3,1,0,0,0,1,9},
		{9,1,1,1,1,1,1,1,1,9}	
	},
	{//3
		{9,1,1,1,1,9},
		{1,1,0,0,1,9},
		{1,0,0,4,1,9},
		{1,1,0,0,1,1},
		{1,1,4,5,0,1},
		{1,3,4,4,0,1},
		{1,3,3,7,3,1},
		{1,1,1,1,1,1}
	},
	{//4
		{9,9,9,9,1,1,1,1},
		{1,1,1,1,1,0,0,1},
		{1,0,0,0,4,0,0,1},
		{1,0,7,3,1,0,0,1},
		{1,1,0,1,1,0,1,1},
		{1,0,0,0,0,0,0,1},
		{1,0,5,1,0,0,0,1},
		{1,0,0,1,1,1,1,1},
		{1,1,1,1,9,9,9,9}
	},
	{//5
		{9,9,9,1,1,1,1,1,1,1,9,9,9},
		{1,1,1,1,0,0,0,0,0,1,9,9,9},
		{1,0,0,0,3,1,1,1,0,1,9,9,9},
		{1,0,1,0,1,0,0,0,0,1,1,9,9},
		{1,0,1,0,4,0,4,1,3,0,1,9,9},
		{1,0,1,0,0,7,0,0,1,0,1,9,9},
		{1,0,3,1,4,0,4,0,1,0,1,9,9},
		{1,1,0,0,0,0,1,0,1,0,1,1,1},
		{9,1,0,1,1,1,3,0,0,0,0,5,1},
		{9,1,0,0,0,0,0,1,1,0,0,0,1},
		{9,1,1,1,1,1,1,1,1,1,1,1,1}
	},
	{
		{9,9,9,1,1,1,1,1,1,1},
		{9,9,1,1,0,0,1,0,5,1},
		{9,9,1,0,0,0,1,4,0,1},
		{9,9,1,4,0,0,4,0,0,1},
		{9,9,1,0,4,1,1,0,0,1},
		{1,1,1,0,4,0,1,0,1,1},
		{1,3,3,3,3,3,0,0,1,9},
		{1,1,1,1,1,1,1,1,1,9}
	},
	{
		{9,9,9,1,1,1,1,1,1,9},
		{9,1,1,1,0,0,0,0,1,9},
		{1,1,3,0,4,1,1,0,1,1},
		{1,3,3,4,0,4,0,5,0,1},
		{1,3,3,0,4,0,4,0,1,1},
		{1,1,1,1,1,1,0,0,1,9},
		{9,9,9,9,9,1,1,1,1,9}
	},
	{
		{9,1,1,1,1,1,1,1,1,1,9},
		{9,1,0,0,1,1,0,0,0,1,9},
		{9,1,0,0,0,4,0,0,0,1,9},
		{9,1,4,0,1,1,1,0,4,1,9},
		{9,1,0,1,3,3,3,1,0,1,9},
		{1,1,0,1,3,3,3,1,0,1,1},
		{1,0,4,0,0,4,0,0,4,0,1},
		{1,0,0,0,0,0,1,0,0,5,1},
		{1,1,1,1,1,1,1,1,1,1,1}
	},
	{
		{9,9,1,1,1,1,1,1},
		{9,9,1,0,0,0,0,1},
		{1,1,1,4,4,4,0,1},
		{1,5,0,4,3,3,0,1},
		{1,0,4,3,3,3,1,1},
		{1,1,1,1,0,0,1,9},
		{9,9,9,1,1,1,1,9}
	}
};
IMAGE box;


void DawnMap()
{
	for(int i=0;i<wid[guaqia];i++)
	{
		for(int j=0;j<heg[guaqia];j++)
		{
			switch(map[i][j])
			{
			case 9:
				loadimage(&box,L".\\res\\qiangwai.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 1:
				loadimage(&box,L".\\res\\qiang.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 3:
				loadimage(&box,L".\\res\\qiu.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 4:
				loadimage(&box,L".\\res\\box.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 5:
				loadimage(&box,L".\\res\\ren.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 7://箱子+目的地
				loadimage(&box,L".\\res\\redbox.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 8://箱子加人
				loadimage(&box,L".\\res\\ren.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			case 0:
				loadimage(&box,L".\\res\\qiangnei.jpg",50,50);
				putimage(j*50,i*50,&box);
				break;
			}
		}
		printf("\n");
	}

}

void FuZhi(int ma1[20][20])
{
	for(int i=0;i<wid[guaqia];i++)
	{
		for(int j=0;j<heg[guaqia];j++)
		{
			map[i][j]=ma1[i][j];
		}
	}
}

void Gua()
{
			
				FuZhi(Map[guaqia]);
				if(guaqia==10){
				cleardevice();//背景颜色，默认黑色
				//像素矩阵  坐标系
				settextstyle(100,0,L"微软雅黑");
				outtextxy(100,240,L"恭喜您已通关！");//在指定的坐标输出文本
				Sleep(1500);
				system(0);
				}
}
 
void HuiTui()
{
	if(!sa.empty())
	{
			int (*p)[20]=sa.top();
			for(int i=0;i<wid[guaqia];i++)
			{
				for(int j=0;j<heg[guaqia];j++)
				{
					map[i][j]=p[i][j];
				}
		}
			sa.pop();
	}
	
}

void PalyGame()
{
	int row,col;
	int map1[20][20];
	for(int i=0;i<wid[guaqia];i++)
	{
		for(int j=0;j<heg[guaqia];j++)
		{
			if(map[i][j]==5||map[i][j]==8){row=i,col=j;}
			map1[i][j]=map[i][j];
		}
	}

	char input;
	input=getch();
	switch(input)
	{
	case 'w':
		if(map[row-1][col]==0||map[row-1][col]==3)
		{
			map1[row][col]=(map[row][col]-=5);
			map1[row-1][col]=(map[row-1][col]+=5);
			sa.push(map1);
		}
		else if(map[row-1][col]==4||map[row-1][col]==7)
		{
			if(map[row-2][col]==0||map[row-2][col]==3)
			{
				map1[row-1][col]=(map[row-1][col]+=1);
				map1[row-2][col]=(map[row-2][col]+=4);
				map1[row][col]=(map[row][col]-=5);
				sa.push(map1);
			}
		}
		break;
	case 'a':
		if(map[row][col-1]==0||map[row][col-1]==3)
		{
			map1[row][col]=(map[row][col]-=5);
			map1[row][col-1]=(map[row][col-1]+=5);sa.push(map1);
		}
		else if(map[row][col-1]==4||map[row][col-1]==7)
		{
			if(map[row][col-2]==0||map[row][col-2]==3)
			{
				map1[row][col-1]=(map[row][col-1]+=1);
				map[row][col-2]=(map[row][col-2]+=4) ;
				map1[row][col]=(map[row][col]-=5);
				sa.push(map1);
			}
		}
		break;
	case 's':
		if(map[row+1][col]==0||map[row+1][col]==3)
		{
			map1[row][col]=(map[row][col]-=5);
			map1[row+1][col-1]=(map[row+1][col]+=5);
			sa.push(map1);
		}
		else if(map[row+1][col]==4||map[row+1][col]==7)
		{
			if(map[row+2][col]==0||map[row+2][col]==3)
			{
				map1[row+1][col]=(map[row+1][col]+=1);
				map1[row+2][col]=(map[row+2][col]+=4);
				map1[row][col]=(map[row][col]-=5);
				sa.push(map1);
			}
		}
		break;
	case 'd':
		if(map[row][col+1]==0||map[row][col+1]==3)
		{
			map1[row][col]=(map[row][col]-=5);
			map1[row][col+1]=(map[row][col+1]+=5);
			sa.push(map1);
		}
		else if(map[row][col+1]==4||map[row][col+1]==7)
		{
			if(map[row][col+2]==0||map[row][col+2]==3)
			{
				map1[row][col+1]=(map[row][col+1]+=1);
				map1[row][col+2]=(map[row][col+2]+=4);
				map1[row][col]=(map[row][col]-=5);
				sa.push(map1);
			}
		}
		break;
	case 'r':
		Gua();
		break;
	case 'z':
		HuiTui();
		break;
	}
}

int Victory()
{
	int k=0;
	for(int i=0;i<wid[guaqia];i++)
	{
		for(int j=0;j<heg[guaqia];j++)
		{
			if(map[i][j]==7)
			{
				k++;
			}
		}
	}
	if(k==gua[guaqia])
		return 1;
	return 0;
}



int main()
{
	guaqia=0;
	initgraph(800,600);
	FuZhi(Map[guaqia]);
	sa.push(map);
	//SetConsoleTitle(L"推箱子");
	//system("mode con cols=40 lines=20");
	while(1)
	{
		settextstyle(20,0,L"微软雅黑");
		outtextxy(600,50,L"WSAD为上下左右");
		outtextxy(600,100,L"重置关卡请按r键");//在指定的坐标输出文本
		outtextxy(600,150,L"后撤请按z键");//在指定的坐标输出文本
		DawnMap();
		PalyGame();
		if(Victory()==1)
		{
			cleardevice();//背景颜色，默认黑色
			//像素矩阵  坐标系
			settextstyle(100,0,L"微软雅黑");
			outtextxy(100,240,L"马上进入下一关");//在指定的坐标输出文本
			Sleep(1500);
			cleardevice();
			guaqia++;
			Gua();
			while(!sa.empty()){sa.pop();}
		}
	}
	return 0;
}